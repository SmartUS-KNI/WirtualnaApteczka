package smartcity.kni.wirtualnaapteczka;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ALERGENS__LIST".
*/
public class Alergens_ListDao extends AbstractDao<Alergens_List, Long> {

    public static final String TABLENAME = "ALERGENS__LIST";

    /**
     * Properties of entity Alergens_List.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MedicineId = new Property(1, Long.class, "medicineId", false, "MEDICINE_ID");
        public final static Property AlergenId = new Property(2, Long.class, "alergenId", false, "ALERGEN_ID");
    }

    private DaoSession daoSession;


    public Alergens_ListDao(DaoConfig config) {
        super(config);
    }
    
    public Alergens_ListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ALERGENS__LIST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MEDICINE_ID\" INTEGER," + // 1: medicineId
                "\"ALERGEN_ID\" INTEGER);"); // 2: alergenId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ALERGENS__LIST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Alergens_List entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long medicineId = entity.getMedicineId();
        if (medicineId != null) {
            stmt.bindLong(2, medicineId);
        }
 
        Long alergenId = entity.getAlergenId();
        if (alergenId != null) {
            stmt.bindLong(3, alergenId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Alergens_List entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long medicineId = entity.getMedicineId();
        if (medicineId != null) {
            stmt.bindLong(2, medicineId);
        }
 
        Long alergenId = entity.getAlergenId();
        if (alergenId != null) {
            stmt.bindLong(3, alergenId);
        }
    }

    @Override
    protected final void attachEntity(Alergens_List entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Alergens_List readEntity(Cursor cursor, int offset) {
        Alergens_List entity = new Alergens_List( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // medicineId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // alergenId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Alergens_List entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMedicineId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAlergenId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Alergens_List entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Alergens_List entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Alergens_List entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
