package smartcity.kni.wirtualnaapteczka;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import smartcity.kni.wirtualnaapteczka.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "MEDICINE".
 */
@Entity(active = true)
public class Medicine {

    @Id(autoincrement = true)
    private Long id;
    private String name;
    private String description;
    private java.util.Date expiryDate;
    private String tag;
    private String EAN;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient MedicineDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "medicineId")
    })
    private List<Alergens_List> alergensList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "idMedicine")
    })
    private List<Dose> doseList;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "idMedicine")
    })
    private List<Information> informationList;

    @Generated
    public Medicine() {
    }

    public Medicine(Long id) {
        this.id = id;
    }

    @Generated
    public Medicine(Long id, String name, String description, java.util.Date expiryDate, String tag, String EAN) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.expiryDate = expiryDate;
        this.tag = tag;
        this.EAN = EAN;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMedicineDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public java.util.Date getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(java.util.Date expiryDate) {
        this.expiryDate = expiryDate;
    }

    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    public String getEAN() {
        return EAN;
    }

    public void setEAN(String EAN) {
        this.EAN = EAN;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Alergens_List> getAlergensList() {
        if (alergensList == null) {
            __throwIfDetached();
            Alergens_ListDao targetDao = daoSession.getAlergens_ListDao();
            List<Alergens_List> alergensListNew = targetDao._queryMedicine_AlergensList(id);
            synchronized (this) {
                if(alergensList == null) {
                    alergensList = alergensListNew;
                }
            }
        }
        return alergensList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetAlergensList() {
        alergensList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Dose> getDoseList() {
        if (doseList == null) {
            __throwIfDetached();
            DoseDao targetDao = daoSession.getDoseDao();
            List<Dose> doseListNew = targetDao._queryMedicine_DoseList(id);
            synchronized (this) {
                if(doseList == null) {
                    doseList = doseListNew;
                }
            }
        }
        return doseList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetDoseList() {
        doseList = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Information> getInformationList() {
        if (informationList == null) {
            __throwIfDetached();
            InformationDao targetDao = daoSession.getInformationDao();
            List<Information> informationListNew = targetDao._queryMedicine_InformationList(id);
            synchronized (this) {
                if(informationList == null) {
                    informationList = informationListNew;
                }
            }
        }
        return informationList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetInformationList() {
        informationList = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
