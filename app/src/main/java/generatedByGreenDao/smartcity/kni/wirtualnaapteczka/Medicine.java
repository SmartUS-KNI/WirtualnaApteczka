package smartcity.kni.wirtualnaapteczka;

import org.greenrobot.greendao.annotation.*;

import smartcity.kni.wirtualnaapteczka.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "MEDICINE".
 */
@Entity(active = true)
public class Medicine {

    @Id(autoincrement = true)
    private Long id;
    private String name;
    private String description;
    private java.util.Date expiryDate;
    private String tag;
    private String EAN;
    private Long idInformation;
    private Long idDose;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient MedicineDao myDao;

    @ToOne(joinProperty = "medicineId")
    private Alergens_List alergens_List;

    @Generated
    private transient Long alergens_List__resolvedKey;

    @ToOne(joinProperty = "idMedicine")
    private Dose dose;

    @Generated
    private transient Long dose__resolvedKey;

    @ToOne(joinProperty = "idInformation")
    private Information information;

    @Generated
    private transient Long information__resolvedKey;

    @Generated
    public Medicine() {
    }

    public Medicine(Long id) {
        this.id = id;
    }

    @Generated
    public Medicine(Long id, String name, String description, java.util.Date expiryDate, String tag, String EAN, Long idInformation, Long idDose) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.expiryDate = expiryDate;
        this.tag = tag;
        this.EAN = EAN;
        this.idInformation = idInformation;
        this.idDose = idDose;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMedicineDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public java.util.Date getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(java.util.Date expiryDate) {
        this.expiryDate = expiryDate;
    }

    public String getTag() {
        return tag;
    }

    public void setTag(String tag) {
        this.tag = tag;
    }

    public String getEAN() {
        return EAN;
    }

    public void setEAN(String EAN) {
        this.EAN = EAN;
    }

    public Long getIdInformation() {
        return idInformation;
    }

    public void setIdInformation(Long idInformation) {
        this.idInformation = idInformation;
    }

    public Long getIdDose() {
        return idDose;
    }

    public void setIdDose(Long idDose) {
        this.idDose = idDose;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Alergens_List getAlergens_List() {
        Long __key = this.medicineId;
        if (alergens_List__resolvedKey == null || !alergens_List__resolvedKey.equals(__key)) {
            __throwIfDetached();
            Alergens_ListDao targetDao = daoSession.getAlergens_ListDao();
            Alergens_List alergens_ListNew = targetDao.load(__key);
            synchronized (this) {
                alergens_List = alergens_ListNew;
            	alergens_List__resolvedKey = __key;
            }
        }
        return alergens_List;
    }

    @Generated
    public void setAlergens_List(Alergens_List alergens_List) {
        synchronized (this) {
            this.alergens_List = alergens_List;
            medicineId = alergens_List == null ? null : alergens_List.getId();
            alergens_List__resolvedKey = medicineId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Dose getDose() {
        Long __key = this.idMedicine;
        if (dose__resolvedKey == null || !dose__resolvedKey.equals(__key)) {
            __throwIfDetached();
            DoseDao targetDao = daoSession.getDoseDao();
            Dose doseNew = targetDao.load(__key);
            synchronized (this) {
                dose = doseNew;
            	dose__resolvedKey = __key;
            }
        }
        return dose;
    }

    @Generated
    public void setDose(Dose dose) {
        synchronized (this) {
            this.dose = dose;
            idMedicine = dose == null ? null : dose.getId();
            dose__resolvedKey = idMedicine;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Information getInformation() {
        Long __key = this.idInformation;
        if (information__resolvedKey == null || !information__resolvedKey.equals(__key)) {
            __throwIfDetached();
            InformationDao targetDao = daoSession.getInformationDao();
            Information informationNew = targetDao.load(__key);
            synchronized (this) {
                information = informationNew;
            	information__resolvedKey = __key;
            }
        }
        return information;
    }

    @Generated
    public void setInformation(Information information) {
        synchronized (this) {
            this.information = information;
            idInformation = information == null ? null : information.getId();
            information__resolvedKey = idInformation;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
