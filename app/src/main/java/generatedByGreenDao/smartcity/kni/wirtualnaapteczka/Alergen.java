package smartcity.kni.wirtualnaapteczka;

import org.greenrobot.greendao.annotation.*;

import smartcity.kni.wirtualnaapteczka.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "ALERGEN".
 */
@Entity(active = true)
public class Alergen {

    @Id(autoincrement = true)
    private Long id;
    private String name;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient AlergenDao myDao;

    @ToOne(joinProperty = "alergenId")
    private Alergens_List alergens_List;

    @Generated
    private transient Long alergens_List__resolvedKey;

    @Generated
    public Alergen() {
    }

    public Alergen(Long id) {
        this.id = id;
    }

    @Generated
    public Alergen(Long id, String name) {
        this.id = id;
        this.name = name;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAlergenDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Alergens_List getAlergens_List() {
        Long __key = this.alergenId;
        if (alergens_List__resolvedKey == null || !alergens_List__resolvedKey.equals(__key)) {
            __throwIfDetached();
            Alergens_ListDao targetDao = daoSession.getAlergens_ListDao();
            Alergens_List alergens_ListNew = targetDao.load(__key);
            synchronized (this) {
                alergens_List = alergens_ListNew;
            	alergens_List__resolvedKey = __key;
            }
        }
        return alergens_List;
    }

    @Generated
    public void setAlergens_List(Alergens_List alergens_List) {
        synchronized (this) {
            this.alergens_List = alergens_List;
            alergenId = alergens_List == null ? null : alergens_List.getId();
            alergens_List__resolvedKey = alergenId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
