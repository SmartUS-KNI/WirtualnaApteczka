package smartcity.kni.wirtualnaapteczka;

import org.greenrobot.greendao.annotation.*;

import smartcity.kni.wirtualnaapteczka.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit.

/**
 * Entity mapped to table "DOSE".
 */
@Entity(active = true)
public class Dose {

    @Id(autoincrement = true)
    private Long id;
    private java.util.Date time;
    private Integer count;
    private Long idMedicine;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient DoseDao myDao;

    @ToOne(joinProperty = "idMedicine")
    private Medicine medicine;

    @Generated
    private transient Long medicine__resolvedKey;

    @Generated
    public Dose() {
    }

    public Dose(Long id) {
        this.id = id;
    }

    @Generated
    public Dose(Long id, java.util.Date time, Integer count, Long idMedicine) {
        this.id = id;
        this.time = time;
        this.count = count;
        this.idMedicine = idMedicine;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDoseDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getTime() {
        return time;
    }

    public void setTime(java.util.Date time) {
        this.time = time;
    }

    public Integer getCount() {
        return count;
    }

    public void setCount(Integer count) {
        this.count = count;
    }

    public Long getIdMedicine() {
        return idMedicine;
    }

    public void setIdMedicine(Long idMedicine) {
        this.idMedicine = idMedicine;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Medicine getMedicine() {
        Long __key = this.idMedicine;
        if (medicine__resolvedKey == null || !medicine__resolvedKey.equals(__key)) {
            __throwIfDetached();
            MedicineDao targetDao = daoSession.getMedicineDao();
            Medicine medicineNew = targetDao.load(__key);
            synchronized (this) {
                medicine = medicineNew;
            	medicine__resolvedKey = __key;
            }
        }
        return medicine;
    }

    @Generated
    public void setMedicine(Medicine medicine) {
        synchronized (this) {
            this.medicine = medicine;
            idMedicine = medicine == null ? null : medicine.getId();
            medicine__resolvedKey = idMedicine;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

}
